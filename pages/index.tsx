import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import styles from '../styles/Home.module.css';
const Home = ({ initialPokemon }: any) => {
  const [guess, setGuess] = useState(false);
  const [title, setTitle] = useState('');
  const [intentos, setIntentos] = useState(0);
  const [pokes, setPokes] = useState([]);
  const [winner, setWinner] = useState(false);
  const [errors, setErrors] = useState(6);
  const [end, setEnd] = useState(false);
  const name = initialPokemon.name;
  console.log(name);
  const type = initialPokemon.types[0].type.name;
  const buttonOnsubmitHandler = (evento: any) => {
    evento.preventDefault();
    const datosNuevos = {
      title: title,
    };
    setTitle('');
    const newData: any = [...pokes, datosNuevos];
    setPokes(newData);
    setIntentos(intentos + 1);
    setErrors(errors - 1);
    getType();
  };
  const getType = () => {
    if (title === name) {
      setWinner(!winner);
    }
  };
  const pokemonOnchangeHandler = (evento: any) => {
    setTitle(evento.target.value);
    if (name === title) {
      setWinner(true);
    }
    if (errors === 0) {
      setWinner(true);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Pokemon Guess</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="text-center">Pokemon guess</h1>
        <p>Numero de intentos {errors} </p>
        <div className="flex flex-row justify-center mt-10">
          <Image
            className={`drop-shadow-xl
            ${winner === false ? 'blur-xl' : 'blur-none'}
            `}
            src={initialPokemon.sprites.front_default}
            alt={initialPokemon.name}
            width={240}
            height={240}
          />
        </div>
        {winner == false ? (
          intentos < 6 ? (
            <>
              <div className="flex flex-row justify-center my-5">
                <p>
                  The pokemon name contains {initialPokemon.name.length} letters
                </p>
              </div>
              <div className="bg-green-100 rounded-2xl p-4">
                <form onSubmit={buttonOnsubmitHandler}>
                  <input
                    type="text"
                    placeholder="Pokemon name"
                    name="text"
                    value={title}
                    onChange={pokemonOnchangeHandler}
                    required
                  />
                  <button className="rounded-2xl p-2 bg-cyan-300 hover:bg-cyan-500 hover:text-white text-center">
                    Send Answer
                  </button>
                </form>
                <button
                  onClick={() => {
                    setGuess(!guess);
                  }}>
                  Â¿you want a clue?
                </button>
                {guess && <p>The pokemon type is {type} </p>}
              </div>
              <div className="flex flex-col text-center">
                <p>Your answers {pokes.length} </p>
                <ul className="flex flex-col max-w-fat rounded-2xl bg-green-200">
                  {pokes.map((e: any, index: number) => {
                    return (
                      <li key={index}>
                        {e.title.toUpperCase().charAt(0) +
                          e.title.toLowerCase().substring(1, e.title.length)}
                      </li>
                    );
                  })}
                </ul>
              </div>
            </>
          ) : (
            <>
              <div className="flex flex-col justify-center">
                <p className="text-center my-5 text-3xl">
                  You lose the pokemon is {initialPokemon.name}
                </p>
                <button
                  className="bg-indigo-200 hover:bg-indigo-400 hover:text-white p-2 rounded-2xl"
                  onClick={() => window.location.reload()}>
                  Do you want to play another game?
                </button>
              </div>
            </>
          )
        ) : (
          <>
            <div className="flex flex-col justify-center">
              <p className="text-center my-5 text-3xl">You win</p>
              <button
                className="bg-indigo-200 hover:bg-indigo-400 hover:text-white p-2 rounded-2xl"
                onClick={() => window.location.reload()}>
                Do you want to play another game?
              </button>
            </div>
          </>
        )}
      </main>
    </div>
  );
};

export default Home;
export async function getStaticProps() {
  const numeroAleatorio = (max: number, min: number) => {
    let num = Math.round(Math.random() * (max - min) + min);
    return num;
  };
  let poke = numeroAleatorio(1, 898);
  let initialPokemon;
  const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${poke}`);
  initialPokemon = await res.json();
  return {
    props: { initialPokemon },
  };
}

