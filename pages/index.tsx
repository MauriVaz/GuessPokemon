import Head from 'next/head';
import Image from 'next/image';
import { useState } from 'react';
import styles from '../styles/Home.module.css';
const Home = ({ initialPokemon }: any) => {
  const [guess, setGuess] = useState(false);
  const [title, setTitle] = useState('');
  const [intentos, setIntentos] = useState(0);
  const [pokes, setPokes] = useState([]);
  const [winner, setWinner] = useState(false);
  const [errors, setErrors] = useState(6);
  const [letter, setLetter] = useState(false);

  let today = new Date();
  let y = today.getSeconds();
  y = y * 15 + 5;
  if (y > 905) {
    y -= 243;
  }
  const name = initialPokemon.name;
  // const type1 = initialPokemon.types[0].type.name;
  // const type2 = initialPokemon.types[1].type.name;
  const types = initialPokemon.types;
  const buttonOnsubmitHandler = (evento: any) => {
    evento.preventDefault();
    const datosNuevos = {
      title: title,
    };
    setTitle('');
    const newData: any = [...pokes, datosNuevos];
    setPokes(newData);
    setIntentos(intentos + 1);
    setErrors(errors - 1);
    getType();
  };
  const getType = () => {
    if (title === name) {
      setWinner(!winner);
    }
  };
  const pokemonOnchangeHandler = (evento: any) => {
    setTitle(evento.target.value.toLowerCase());
    if (name === title) {
      setWinner(true);
    }
    if (errors === 0) {
      setWinner(true);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Pokemon Guess</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="text-center">Pokemon guess</h1>
        <p>Numero de intentos {errors} </p>
        <div className=" flex flex-row justify-center mt-10">
          <Image
            className={`drop-shadow-xl shadow-lg shadow-blue-500/50
            bg-cyan-500 rounded-3xl
            ${winner === false ? 'blur-md' : 'blur-none animate-pulse'}
            `}
            src={initialPokemon.sprites.front_default}
            alt={initialPokemon.name}
            width={240}
            height={240}
            priority
            quality={100}
          />
        </div>
        {winner == false ? (
          intentos < 6 ? (
            <>
              <div className="flex flex-col justify-center my-5">
                <p>
                  The pokemon name contains {initialPokemon.name.length} letters
                </p>
              </div>
              <div className="bg-green-100 rounded-2xl p-4">
                <form onSubmit={buttonOnsubmitHandler}>
                  <div className="flex justify-center">
                    <input
                      type="text"
                      placeholder="Pokemon name"
                      name="text"
                      value={title}
                      onChange={pokemonOnchangeHandler}
                      required
                    />
                    <button className="mx-10 rounded-2xl p-2 bg-cyan-300 hover:bg-cyan-500 hover:text-white text-center">
                      Send Answer
                    </button>
                  </div>
                </form>
                <div className="flex justify-around">
                  <div className="flex flex-col mt-10">
                    <button
                      className="bg-blue-300 hover:bg-blue-500 hover:text-white rounded-3xl p-2"
                      onClick={() => {
                        setGuess(!guess);
                      }}>
                      {guess ? (
                        <p>Show the pokemon types</p>
                      ) : (
                        <p>Dont show the pokemon types</p>
                      )}
                    </button>
                    {guess && (
                      <>
                        {types.map((e: any, index: number) => {
                          return (
                            <p key={index}>
                              {e.type.name.charAt(0).toUpperCase() +
                                e.type.name
                                  .toLowerCase()
                                  .substring(1, e.type.name.length)}{' '}
                            </p>
                          );
                        })}
                      </>
                    )}
                  </div>
                  <div className="flex flex-col mt-10">
                    <button
                      className="bg-blue-300 hover:bg-blue-500 hover:text-white rounded-3xl p-2"
                      onClick={() => setLetter(!letter)}>
                      Show the first letter of pokemon
                    </button>
                    {letter && <p>{name.charAt(0).toUpperCase()} </p>}
                  </div>
                </div>
              </div>
              <div className="flex flex-col text-center">
                <p>Your answers {pokes.length} </p>
                <ul className="flex flex-col max-w-fat rounded-2xl bg-green-200">
                  {pokes.map((e: any, index: number) => {
                    return (
                      <li key={index}>
                        {e.title.toUpperCase().charAt(0) +
                          e.title.toLowerCase().substring(1, e.title.length)}
                      </li>
                    );
                  })}
                </ul>
              </div>
            </>
          ) : (
            <>
              <div className="flex flex-col justify-center">
                <p className="text-center my-5 text-3xl">
                  You lose the pokemon is {initialPokemon.name}
                </p>
                <button
                  className="bg-indigo-200 hover:bg-indigo-400 hover:text-white p-2 rounded-2xl"
                  onClick={() => window.location.reload()}>
                  Do you want to play another game?
                </button>
              </div>
            </>
          )
        ) : (
          <>
            <div className="flex flex-col justify-center">
              <p className="text-center my-5 text-3xl">You win</p>
              <button
                className="bg-indigo-200 hover:bg-indigo-400 hover:text-white p-2 rounded-2xl"
                onClick={() => window.location.reload()}>
                Do you want to play another game?
              </button>
            </div>
          </>
        )}
      </main>
    </div>
  );
};

export default Home;
export async function getServerSideProps(goals: number) {
  let today = new Date();
  let y = today.getSeconds() * 15;
  let initialPokemon;
  const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${y}`);
  initialPokemon = await res.json();
  return {
    props: { initialPokemon },
  };
}

